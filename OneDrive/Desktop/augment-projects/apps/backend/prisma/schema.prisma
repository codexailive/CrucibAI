generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                String   @id @default(cuid())
  encrypted_email   String   @unique
  email             String   @unique
  name              String
  encrypted_password String
  passwordHash      String
  stripeCustomerId  String?
  mfaEnabled        Boolean  @default(false)
  mfaSecret         String?
  lastActiveAt      DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  subscription      UserSubscription?
  deploymentPurchases DeploymentPurchase[]
  activeDeployments ActiveDeployment[]
  overageCharges    OverageCharge[]
  usageAlerts       UsageAlert[]
  supportTickets    SupportTicket[]
  ticketReplies     TicketReply[]
  usageTracking     UsageTracking[]
}

model DeploymentPurchase {
  id        String   @id @default(cuid())
  userId    String
  tier      String   // Starter, Professional, etc.
  quantity  Int      // Number of deployments
  price     Float    // Total paid
  status    String   // active, expired
  purchasedAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])
}

model ActiveDeployment {
  id        String   @id @default(cuid())
  userId    String
  purchaseId String
  name      String
  platform  String   // Vercel, AWS, etc.
  status    String   // deploying, active, failed
  url       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model OverageCharge {
  id        String   @id @default(cuid())
  userId    String
  type      String   // ai_calls, quantum, storage, etc.
  amount    Float    // Charge amount
  units     Int      // Units over limit
  rate      Float    // Per-unit rate
  billedAt  DateTime @default(now())
  status    String   // pending, paid, failed

  user User @relation(fields: [userId], references: [id])
}

model UsageAlert {
  id        String   @id @default(cuid())
  userId    String
  type      String   // ai_calls, quantum, etc.
  threshold Float    // 0.8 = 80% of limit
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model SupportTicket {
  id        String   @id @default(cuid())
  userId    String
  subject   String
  message   String
  status    String   // open, in_progress, resolved
  priority  String   // low, medium, high, urgent
  category  String   // billing, technical, feature
  assignedTo String?  // Agent ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  replies TicketReply[]
}

model TicketReply {
  id        String   @id @default(cuid())
  ticketId  String
  userId    String
  message   String
  isInternal Boolean  @default(false)
  createdAt DateTime @default(now())

  ticket SupportTicket @relation(fields: [ticketId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model KnowledgeBaseArticle {
  id        String   @id @default(cuid())
  title     String
  content   String   // Markdown
  category  String
  tags      String
  published Boolean  @default(true)
  views     Int      @default(0)
  helpful   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSubscription {
  id                    String   @id @default(cuid())
  userId                String   @unique
  tier                  String   // Discovery, Starter, Professional, Business, Team, Enterprise, Unlimited
  status                String   // active, cancelled, payment_failed
  billingCycle          String   @default("monthly") // monthly, annual
  nextBillingDate       DateTime
  currentPeriodStart    DateTime?
  currentPeriodEnd      DateTime?
  annualDiscount        Float    @default(0.167) // 16.7% discount
  autoRenew             Boolean  @default(true)
  renewalReminderSent   Boolean  @default(false)
  stripeSubscriptionId  String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
}

model UsageTracking {
  id        String   @id @default(cuid())
  userId    String
  service   String   // AI_CALLS, QUANTUM_JOBS, etc.
  amount    Int
  month     String   // YYYY-MM format
  timestamp DateTime @default(now())
  metadata  String?  // JSON string for additional data

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, month])
}

model AuditLogEntry {
  id        String   @id @default(cuid())
  eventId   String   @unique
  action    String
  userId    String
  data      String?  // JSON data
  createdAt DateTime @default(now())
}

model EncryptionSettings {
  id         String    @id @default(cuid())
  enabled    Boolean   @default(false)
  algorithm  String?
  keyId      String?
  rotatedAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model ServiceConfig {
  id                   String   @id @default(cuid())
  name                 String   @unique
  auditLoggingEnabled  Boolean  @default(false)
  config               String?  // JSON config
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model ComplianceEvidence {
  id        String   @id @default(cuid())
  type      String   // automated, manual
  standard  String   // SOC2, GDPR, etc.
  control   String
  evidence  String   // JSON evidence data
  createdAt DateTime @default(now())
}

model Attestation {
  id        String   @id @default(cuid())
  type      String
  subject   String
  issuer    String
  issuedAt  DateTime @default(now())
  expiresAt DateTime?
  data      String?  // JSON attestation data
}

model Documentation {
  id        String   @id @default(cuid())
  title     String
  type      String   // compliance, technical, etc.
  content   String?  // Markdown or JSON content
  url       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuantumJob {
  id          String    @id @default(cuid())
  userId      String
  graphId     String
  type        String    // qaoa_optimization, vqe, etc.
  status      String    // running, completed, failed
  priority    String    // low, medium, high
  backend     String    // braket, qiskit, etc.
  result      String?   // JSON result
  error       String?
  createdAt   DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?
}

model AuditLog {
  id        String   @id @default(cuid())
  eventId   String   @unique
  action    String
  userId    String
  data      String?  // JSON data
  createdAt DateTime @default(now())
}

model ARVRSession {
  id        String   @id @default(cuid())
  userId    String
  type      String   // AR, VR
  sceneData String?  // JSON scene data
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MarketplaceInstallation {
  id          String   @id @default(cuid())
  userId      String
  packageId   String
  packageName String
  version     String
  status      String   // installed, active, disabled
  installedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model QuantumCircuit {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  circuitData String   // JSON circuit definition
  gates       String   // JSON gates array
  qubits      Int
  depth       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
